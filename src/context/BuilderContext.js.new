import React, { createContext, useContext, useState } from 'react';

const BuilderContext = createContext();

export const useBuilderContext = () => useContext(BuilderContext);

export const BuilderProvider = ({ children }) => {
  // State for the canvas elements
  const [elements, setElements] = useState([]);
  
  // State for the selected elements (multi-selection support)
  const [selectedElements, setSelectedElements] = useState([]);
  
  // State for the primary selected element (for properties panel)
  const [selectedElement, setSelectedElement] = useState(null);
  
  // State to control properties panel visibility independently from selection
  const [showPropertiesPanel, setShowPropertiesPanel] = useState(false);
  
  // State for template modal
  const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);
  
  // State for template selector
  const [isTemplateSelectorOpen, setIsTemplateSelectorOpen] = useState(true); // Open by default
  
  // State for sidebar visibility and width - initially collapsed
  const [sidebarVisible, setSidebarVisible] = useState(false);
  const [sidebarWidth, setSidebarWidth] = useState(200); // Default width when expanded
  
  // State for properties panel visibility and width - initially collapsed
  const [propertiesPanelVisible, setPropertiesPanelVisible] = useState(false);
  const [propertiesPanelWidth, setPropertiesPanelWidth] = useState(250); // Default width when expanded
  
  // State for selection box (for multi-selection)
  const [selectionBox, setSelectionBox] = useState(null);
  
  // Available element types that can be added to the canvas
  const availableElements = [
    { id: 'text', type: 'text', label: 'Text', content: 'Text Element', properties: { fontSize: '16px', color: '#000000' } },
    { id: 'image', type: 'image', label: 'Image', content: 'https://source.unsplash.com/random/300x200', properties: { width: '300px', height: '200px', alt: 'Image' } },
    { id: 'button', type: 'button', label: 'Button', content: 'Click Me', properties: { backgroundColor: '#4CAF50', color: 'white', padding: '10px 20px', borderRadius: '4px' } },
    { id: 'heading', type: 'heading', label: 'Heading', content: 'Heading', properties: { fontSize: '24px', color: '#000000', fontWeight: 'bold' } },
    { id: 'paragraph', type: 'paragraph', label: 'Paragraph', content: 'This is a paragraph of text that can be edited.', properties: { fontSize: '16px', color: '#000000', lineHeight: '1.5' } },
    { id: 'background', type: 'background', label: 'Background', content: '', properties: { width: '100%', height: '300px', backgroundColor: '#f5f5f5', backgroundImage: '', backgroundSize: 'cover', backgroundPosition: 'center', backgroundRepeat: 'no-repeat', zIndex: '-1', opacity: '1', overlayColor: 'rgba(0,0,0,0)', overlayOpacity: '0', blur: '0px', grayscale: '0%', sepia: '0%', hueRotate: '0deg', contrast: '100%', brightness: '100%' } },
    { id: 'canvasSettings', type: 'canvasSettings', label: 'Canvas Settings', content: '', properties: { marginLeft: '20px', marginRight: '20px', marginTop: '20px', marginBottom: '20px', canvasHeight: 'auto', contentAlignment: 'center' } },
  ];

  // Add a new element to the canvas
  const addElement = (element, position = null) => {
    const newElement = {
      ...element,
      id: `${element.type}-${Date.now()}`,
      position: position || { x: 0, y: 0 }
    };
    setElements(prevElements => [...prevElements, newElement]);
    setSelectedElement(newElement);
    setSelectedElements([newElement]);
    setShowPropertiesPanel(true); // Show properties panel when adding a new element
    return newElement;
  };
  
  // Remove an element from the canvas
  const removeElement = (id) => {
    setElements(prevElements => prevElements.filter(el => el.id !== id));
    
    // If the deleted element was selected, clear the selection
    if (selectedElement && selectedElement.id === id) {
      setSelectedElement(null);
    }
    
    // Remove from selected elements array if present
    setSelectedElements(prevSelected => prevSelected.filter(el => el.id !== id));
  };
  
  // Custom function to handle element selection
  const selectElement = (element, isMultiSelect = false) => {
    if (!isMultiSelect) {
      // Single selection - clear previous selections
      setSelectedElements(element ? [element] : []);
      setSelectedElement(element);
    } else {
      // Multi-selection - add or remove from selection
      setSelectedElements(prevSelected => {
        if (!element) return [];
        
        const isAlreadySelected = prevSelected.some(el => el.id === element.id);
        
        if (isAlreadySelected) {
          // Remove from selection if already selected
          const newSelection = prevSelected.filter(el => el.id !== element.id);
          // Update primary selected element
          setSelectedElement(newSelection.length > 0 ? newSelection[0] : null);
          return newSelection;
        } else {
          // Add to selection
          const newSelection = [...prevSelected, element];
          // Update primary selected element if this is the first selection
          if (prevSelected.length === 0) {
            setSelectedElement(element);
          }
          return newSelection;
        }
      });
    }
    
    if (element) {
      setShowPropertiesPanel(true);
    }
  };
  
  // Function to select multiple elements at once
  const selectMultipleElements = (elementIds) => {
    const selectedElems = elements.filter(el => elementIds.includes(el.id));
    setSelectedElements(selectedElems);
    setSelectedElement(selectedElems.length > 0 ? selectedElems[0] : null);
    if (selectedElems.length > 0) {
      setShowPropertiesPanel(true);
    }
  };
  
  // Function to deselect all elements but keep properties panel open
  const deselectElement = () => {
    setSelectedElement(null);
    setSelectedElements([]);
    // Properties panel remains open
  };

  // Update an element's properties
  const updateElement = (id, updates, applyToAllSelected = false) => {
    // If applying to all selected elements
    if (applyToAllSelected && selectedElements.length > 0) {
      // Get the IDs of all selected elements
      const selectedIds = selectedElements.map(el => el.id);
      
      setElements(prevElements => {
        return prevElements.map(element => {
          // Apply updates to all selected elements
          if (selectedIds.includes(element.id)) {
            // For properties updates, only update the properties object
            if (updates.properties) {
              return {
                ...element,
                properties: {
                  ...element.properties,
                  ...updates.properties
                }
              };
            }
            // For other updates, apply directly
            return { ...element, ...updates };
          }
          return element;
        });
      });
      
      // Update all selected elements in state
      setSelectedElements(prevSelected => {
        return prevSelected.map(element => {
          if (updates.properties) {
            return {
              ...element,
              properties: {
                ...element.properties,
                ...updates.properties
              }
            };
          }
          return { ...element, ...updates };
        });
      });
      
      // Update the primary selected element
      if (selectedElement) {
        if (updates.properties) {
          setSelectedElement(prev => ({
            ...prev,
            properties: {
              ...prev.properties,
              ...updates.properties
            }
          }));
        } else {
          setSelectedElement(prev => ({ ...prev, ...updates }));
        }
      }
    } else {
      // Single element update (original behavior)
      setElements(prevElements => {
        return prevElements.map(element => {
          if (element.id === id) {
            return { ...element, ...updates };
          }
          return element;
        });
      });
      
      // If the selected element is being updated, update it in the state as well
      if (selectedElement && selectedElement.id === id) {
        setSelectedElement(prev => ({ ...prev, ...updates }));
      }
      
      // Update in selectedElements array if present
      setSelectedElements(prevSelected => {
        return prevSelected.map(element => {
          if (element.id === id) {
            return { ...element, ...updates };
          }
          return element;
        });
      });
    }
  };

  // Move an element to a new position
  const moveElement = (id, newPosition, moveAllSelected = false) => {
    if (moveAllSelected && selectedElements.length > 1) {
      // Get the element being moved
      const movingElement = elements.find(el => el.id === id);
      if (!movingElement || !movingElement.position) return;
      
      // Calculate the offset from the original position
      const offsetX = newPosition.x - movingElement.position.x;
      const offsetY = newPosition.y - movingElement.position.y;
      
      // Move all selected elements by the same offset
      selectedElements.forEach(element => {
        if (element.id !== id && element.position) {
          const elementNewPosition = {
            x: element.position.x + offsetX,
            y: element.position.y + offsetY
          };
          updateElement(element.id, { position: elementNewPosition });
        }
      });
    }
    
    // Always move the primary element
    updateElement(id, { position: newPosition });
  };
  
  // Resize an element with new dimensions and position
  const resizeElement = (id, newSize, newPosition) => {
    updateElement(id, { 
      properties: { 
        width: `${newSize.width}px`, 
        height: `${newSize.height}px` 
      }, 
      position: newPosition 
    });
  };
  
  // Get mouse position relative to canvas
  const getCanvasMousePosition = (e, canvasRef) => {
    if (!canvasRef || !canvasRef.current) return { x: 0, y: 0 };
    
    const rect = canvasRef.current.getBoundingClientRect();
    return {
      x: e.clientX - rect.left + canvasRef.current.scrollLeft,
      y: e.clientY - rect.top + canvasRef.current.scrollTop
    };
  };
  
  // Toggle template modal
  const toggleTemplateModal = () => {
    setIsTemplateModalOpen(!isTemplateModalOpen);
  };
  
  // Toggle template selector
  const toggleTemplateSelector = () => {
    setIsTemplateSelectorOpen(!isTemplateSelectorOpen);
  };
  
  // Close template selector
  const closeTemplateSelector = () => {
    setIsTemplateSelectorOpen(false);
  };
  
  // Toggle sidebar visibility
  const toggleSidebar = () => {
    setSidebarVisible(!sidebarVisible);
  };
  
  // Toggle properties panel visibility
  const togglePropertiesPanel = () => {
    setPropertiesPanelVisible(!propertiesPanelVisible);
  };

  return (
    <BuilderContext.Provider
      value={{
        elements,
        setElements,
        selectedElement,
        selectedElements,
        selectElement,
        selectMultipleElements,
        deselectElement,
        addElement,
        removeElement,
        updateElement,
        moveElement,
        resizeElement,
        getCanvasMousePosition,
        availableElements,
        showPropertiesPanel,
        setShowPropertiesPanel,
        isTemplateModalOpen,
        setIsTemplateModalOpen,
        isTemplateSelectorOpen,
        setIsTemplateSelectorOpen,
        toggleTemplateModal,
        toggleTemplateSelector,
        closeTemplateSelector,
        sidebarVisible,
        setSidebarVisible,
        sidebarWidth,
        setSidebarWidth,
        toggleSidebar,
        propertiesPanelVisible,
        setPropertiesPanelVisible,
        propertiesPanelWidth,
        setPropertiesPanelWidth,
        togglePropertiesPanel,
        selectionBox,
        setSelectionBox,
      }}
    >
      {children}
    </BuilderContext.Provider>
  );
};
